SLIDE 2

Hashie este o colectie, in crestere, de unelte extrem de folositoare care extind functionalitate Hash-urilor. Este disponibil ca Rubygem, si a fost dezvoltat de baietii de Intridea. O sa va prezint pe scurt cele 4 tipuri de hash-uri oferite de acest gem: Mash, Dash, Trash si Clash

SLIDE 3

Un Mash este un Hash care se comporta ca un object..... Foloseste notatia cu punct din Ruby, si este folositor in multe cazuri. Eu l-am folosit cu pentru a imbraca un Hash parsat din XML

SLIDE 4

Cel mai simplu mod in care poate fi folosit este de a scrie si citi diferite proprietati. Si aveti aici un exemplu simplu. Avem la dispozitie si metoda cu semnul intrebarii pentru a verifica o cheie. Deci practic, la cel mai de jos nivel Hashie::Mash functioneaza ca un OpenStruct.

SLIDE 5

Dar spre deosebire de OpenStruct, Mash o sa parcurca recursiv hash-ul si o sa transforme tot ce gaseste in Mash, pe oricate nivele. Si vedeti in exemplul de mai jos cum arata un Mash putin mai complex. La aceasta functionalitate ma refeream cand ziceam mai devreme ca e foarte folositor sa imbrace un hash parsat din XML sau JSON.

SLIDE 6

Mai poate fi folosit de exemplu pentru a construi obiecte care se comporta asemator unui active-record object.

SLIDE 7

Hashie:Dash, un hash cu proprietati predefinite, si doar acele proprietati pot fi setate pe hash. Se pot in schimb seta valori predefinite.

SLIDE 9

Hashie::Trash, este de fapt un Dash, care ne permite sa 'traducem' cheile la initializare. Asta va traduce automat cheia firstName la first_name

SLIDE 10

Hashie::Clash, Chainable Lazy Hash, ne ofera posibilitatea de a construi usor hash-uri complexe folosind 'the method notatil chaining'. Ofera o functionalitate asemanatoare cu chaining named_scopes in Rails.

SLIDE 12

Mai sunt cateva chestii care nu le-am zis, de exemplu bang methods, va las sa le vedeti singuri. Cum ziceam, e gem, gasiti codul sursa si documentatie pe github si ceva documentatie pe blogul celor de intridea

SLIDE 13

Deci, avem un script, care sigur are ceva settings. Unele pentru un modul, altele pentru alt modul. Cele mai multe nu se schimba, decat pe laptop, sau in production, sau in testing.. Configliere poate administra settings din mai multe surse, fisiere de configurare, argumente din linie de comanda, variable de environment si altele. Nu trebuie nimic predefinit, dar Configliere stie sa valideze, sa type convert, sa descrie toate setarile independent

SLIDE 14
Settings in Configliere sunt de fapt un simplu hash. Vedeti un exemplu simplu. In primul rand trebuie sa-i specificm ce fel de configuratii o sa folosim. Facem asta cu Settings.use. Apoi adaugam ceva setari, si la final le resolve.

SLIDE 15

Putem, simplu sa citim un fisier de configurare. Settings.read fisierul, Settings.resolve, si atat. Avem Settingsin proiect.

SLIDE 16
Daca specificam ca o sa avem settings din linie de comanda, toate argumentele care le primim de la utilizator le vom avea in Settings. Si avem parametri de genul parametru-valoare, sau parametri booleani. Ce nu avem sunt short parameters

SLIDE 17

Ziceam ca nu e nevoie sa predefinim nimic, dar asta nu inseamna ca nu putem. Cand definim un settings putem sa ii specificam tipul pentru a converti parametrul in form de care avem nevoie. Putem sa ii adaugam o descriere, care se va vedea in help, in linia de comanda de exemplu. Putem sa specificam faptul ca este required, sau criptat

SLIDE 18

Mai stie Configliere si alte chestii. Nu este extrem de simplu de folosit in cazuri mai complexe, dar cu un pic de masaj isi face treaba. Este disponibil ca si gem si gasiti documentatie si exemple pe github.

SLIDE 19

Interfetele in linie de comanda ar trebui sa fie usor de folosit, asa ca de ce nu ar fi si usor de implementat? Highline este un system de capturare si prezentare a datelor in linie de comanda, care ofera validari si type conversion pentru datele introduse. Cele mai importante features din Highline, pe care am sa le prezint pe scurt sunt say, ask, agree si choose

SLIDE 20

Highline ofera suport pentru output ERb. Statementul este procesat ca un template ERb, cu suport pentru embedded Ruby code si ofera access la culori si constante din modulul de culori propriu. Practic putem, usor, formata si colora output-ul cum vrem noi.

SLIDE 21

Metoda 'ask' este interfata prima cu utilizatorul. Trebuie doar sa furnizam intrebarea, eventual tipul de raspuns care il asteptam si un block de cod pentru a specifica cum vrem sa handle raspunsul. Putem de asemenea sa validam raspunsul. In ultimul exemplu am folosit 'agree' care este un shortcut pentru 'ask' care accepta doar 'yes' si 'no' (sau y si n) ca raspunsuri.

SLIDE 22

Choose, metoda pentru a crea meniuri in linie de comanda. Din nou, e extrem de simplu sa construiesti un meniu si in functie de optiunile utilizatorului sa executi una sau alta.

SLIDE 23

Disponibil ca si gem, gasiti documentatie si exemple pe github si rubyforge.org

SLIDE 24